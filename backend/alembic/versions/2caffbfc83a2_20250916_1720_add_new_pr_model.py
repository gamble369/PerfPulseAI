"""20250916_1720_add-new-pr-model

Revision ID: 2caffbfc83a2
Revises: 20250916_1640_fix_score_entries
Create Date: 2025-09-16 17:20:52.960024

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2caffbfc83a2'
down_revision: Union[str, None] = '20250916_1640_fix_score_entries'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_identities',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('platform', sa.String(length=20), nullable=False),
    sa.Column('platform_user_id', sa.String(length=100), nullable=True),
    sa.Column('platform_username', sa.String(length=100), nullable=False),
    sa.Column('platform_email', sa.String(length=200), nullable=True),
    sa.Column('platform_url', sa.String(length=500), nullable=True),
    sa.Column('platform_avatar_url', sa.String(length=500), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('verified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('verification_token', sa.String(length=100), nullable=True),
    sa.Column('verification_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('oauth_access_token', sa.Text(), nullable=True),
    sa.Column('oauth_refresh_token', sa.Text(), nullable=True),
    sa.Column('oauth_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('oauth_scope', sa.String(length=500), nullable=True),
    sa.Column('display_name', sa.String(length=100), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('location', sa.String(length=100), nullable=True),
    sa.Column('company', sa.String(length=100), nullable=True),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('contribution_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_identities_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_identities')),
    sa.UniqueConstraint('platform', 'platform_user_id', name='uq_platform_user_id'),
    sa.UniqueConstraint('platform', 'platform_username', name='uq_platform_username')
    )
    with op.batch_alter_table('user_identities', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_identities_is_primary'), ['is_primary'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_identities_platform'), ['platform'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_identities_platform_email'), ['platform_email'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_identities_platform_username'), ['platform_username'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_identities_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_identities_user_id'), ['user_id'], unique=False)

    op.create_table('pr_metadata',
    sa.Column('pr_node_id', sa.String(length=100), nullable=False),
    sa.Column('pr_number', sa.Integer(), nullable=False),
    sa.Column('repository', sa.String(length=100), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('author_identity_id', sa.Integer(), nullable=True),
    sa.Column('author_platform_username', sa.String(length=100), nullable=False),
    sa.Column('head_commit_sha', sa.String(length=100), nullable=False),
    sa.Column('base_commit_sha', sa.String(length=100), nullable=True),
    sa.Column('commit_message', sa.Text(), nullable=True),
    sa.Column('files_changed', sa.Integer(), nullable=True),
    sa.Column('additions', sa.Integer(), nullable=True),
    sa.Column('deletions', sa.Integer(), nullable=True),
    sa.Column('github_url', sa.String(length=500), nullable=False),
    sa.Column('diff_url', sa.String(length=500), nullable=True),
    sa.Column('patch_url', sa.String(length=500), nullable=True),
    sa.Column('github_created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('github_updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['author_identity_id'], ['user_identities.id'], name=op.f('fk_pr_metadata_author_identity_id_user_identities')),
    sa.PrimaryKeyConstraint('pr_node_id', name=op.f('pk_pr_metadata'))
    )
    with op.batch_alter_table('pr_metadata', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_pr_metadata_author_identity_id'), ['author_identity_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_pr_metadata_author_platform_username'), ['author_platform_username'], unique=False)
        batch_op.create_index(batch_op.f('ix_pr_metadata_pr_number'), ['pr_number'], unique=False)
        batch_op.create_index(batch_op.f('ix_pr_metadata_repository'), ['repository'], unique=False)

    op.create_table('pr_lifecycle_events',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('pr_node_id', sa.String(length=100), nullable=False),
    sa.Column('event_type', sa.Enum('OPENED', 'CLOSED', 'MERGED', 'REOPENED', 'SYNCHRONIZED', 'REVIEW_REQUESTED', 'REVIEW_SUBMITTED', 'REVIEW_APPROVED', 'REVIEW_CHANGES_REQUESTED', 'REVIEW_DISMISSED', 'AI_ANALYSIS_STARTED', 'AI_ANALYSIS_COMPLETED', 'AI_ANALYSIS_FAILED', 'POINTS_CALCULATED', 'POINTS_AWARDED', 'POINTS_DISPUTED', 'DATA_SYNCED', 'ERROR_OCCURRED', 'WEBHOOK_RECEIVED', name='preventtype'), nullable=False),
    sa.Column('event_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('event_source', sa.String(length=50), nullable=False),
    sa.Column('actor', sa.String(length=100), nullable=True),
    sa.Column('event_data', sa.JSON(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['pr_node_id'], ['pr_metadata.pr_node_id'], name=op.f('fk_pr_lifecycle_events_pr_node_id_pr_metadata')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pr_lifecycle_events'))
    )
    with op.batch_alter_table('pr_lifecycle_events', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_pr_lifecycle_events_event_time'), ['event_time'], unique=False)
        batch_op.create_index(batch_op.f('ix_pr_lifecycle_events_event_type'), ['event_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_pr_lifecycle_events_pr_node_id'), ['pr_node_id'], unique=False)

    op.create_table('pr_metrics',
    sa.Column('pr_node_id', sa.String(length=100), nullable=False),
    sa.Column('current_status', sa.String(length=20), nullable=False),
    sa.Column('is_merged', sa.Boolean(), nullable=True),
    sa.Column('merged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('quality_level', sa.String(length=20), nullable=True),
    sa.Column('complexity_score', sa.Float(), nullable=True),
    sa.Column('maintainability_score', sa.Float(), nullable=True),
    sa.Column('test_coverage_score', sa.Float(), nullable=True),
    sa.Column('security_score', sa.Float(), nullable=True),
    sa.Column('vulnerability_count', sa.Integer(), nullable=True),
    sa.Column('critical_issues_count', sa.Integer(), nullable=True),
    sa.Column('review_count', sa.Integer(), nullable=True),
    sa.Column('comment_count', sa.Integer(), nullable=True),
    sa.Column('reviewer_count', sa.Integer(), nullable=True),
    sa.Column('time_to_first_review', sa.Integer(), nullable=True),
    sa.Column('time_to_merge', sa.Integer(), nullable=True),
    sa.Column('active_days', sa.Integer(), nullable=True),
    sa.Column('base_points', sa.Integer(), nullable=True),
    sa.Column('quality_bonus', sa.Integer(), nullable=True),
    sa.Column('collaboration_bonus', sa.Integer(), nullable=True),
    sa.Column('total_points', sa.Integer(), nullable=True),
    sa.Column('ai_analysis_status', sa.String(length=20), nullable=True),
    sa.Column('ai_analysis_result', sa.JSON(), nullable=True),
    sa.Column('ai_summary', sa.Text(), nullable=True),
    sa.Column('metrics_version', sa.String(length=10), nullable=True),
    sa.Column('last_calculated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('needs_recalculation', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['pr_node_id'], ['pr_metadata.pr_node_id'], name=op.f('fk_pr_metrics_pr_node_id_pr_metadata')),
    sa.PrimaryKeyConstraint('pr_node_id', name=op.f('pk_pr_metrics'))
    )
    with op.batch_alter_table('pr_metrics', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_pr_metrics_current_status'), ['current_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_pr_metrics_is_merged'), ['is_merged'], unique=False)
        batch_op.create_index(batch_op.f('ix_pr_metrics_quality_level'), ['quality_level'], unique=False)
        batch_op.create_index(batch_op.f('ix_pr_metrics_quality_score'), ['quality_score'], unique=False)
        batch_op.create_index(batch_op.f('ix_pr_metrics_total_points'), ['total_points'], unique=False)

    op.drop_table('_alembic_tmp_companies')
    with op.batch_alter_table('companies', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_companies_domain'), ['domain'])
        batch_op.create_unique_constraint(batch_op.f('uq_companies_name'), ['name'])

    with op.batch_alter_table('point_transactions', schema=None) as batch_op:
        batch_op.drop_index('idx_point_transactions_balance')
        batch_op.drop_index('idx_point_transactions_company_id')
        batch_op.drop_index('idx_point_transactions_created_at')
        batch_op.drop_index('idx_point_transactions_dispute_deadline')
        batch_op.drop_index('idx_point_transactions_reference')
        batch_op.drop_index('idx_point_transactions_type_created')
        batch_op.drop_index('idx_point_transactions_user_company')
        batch_op.drop_index('idx_point_transactions_user_created')
        batch_op.drop_index('idx_point_transactions_user_id')

    with op.batch_alter_table('pull_request_results', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_pull_request_results_pr_node_id'), ['pr_node_id'])

    with op.batch_alter_table('pull_requests', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_pull_requests_pr_node_id'), ['pr_node_id'])

    with op.batch_alter_table('user_levels', schema=None) as batch_op:
        batch_op.drop_index('idx_user_levels_points_range')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_users_email'), ['email'])
        batch_op.create_unique_constraint(batch_op.f('uq_users_github_url'), ['github_url'])

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_users_github_url'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_users_email'), type_='unique')

    with op.batch_alter_table('user_levels', schema=None) as batch_op:
        batch_op.create_index('idx_user_levels_points_range', ['min_points', 'max_points'], unique=False)

    with op.batch_alter_table('pull_requests', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_pull_requests_pr_node_id'), type_='unique')

    with op.batch_alter_table('pull_request_results', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_pull_request_results_pr_node_id'), type_='unique')

    with op.batch_alter_table('point_transactions', schema=None) as batch_op:
        batch_op.create_index('idx_point_transactions_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_point_transactions_user_created', ['user_id', 'created_at'], unique=False)
        batch_op.create_index('idx_point_transactions_user_company', ['user_id', 'company_id'], unique=False)
        batch_op.create_index('idx_point_transactions_type_created', ['transaction_type', 'created_at'], unique=False)
        batch_op.create_index('idx_point_transactions_reference', ['reference_id', 'reference_type'], unique=False)
        batch_op.create_index('idx_point_transactions_dispute_deadline', ['dispute_deadline'], unique=False)
        batch_op.create_index('idx_point_transactions_created_at', ['created_at'], unique=False)
        batch_op.create_index('idx_point_transactions_company_id', ['company_id'], unique=False)
        batch_op.create_index('idx_point_transactions_balance', ['user_id', 'balance_after'], unique=False)

    with op.batch_alter_table('companies', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_companies_name'), type_='unique')
        batch_op.drop_constraint(batch_op.f('uq_companies_domain'), type_='unique')

    op.create_table('_alembic_tmp_companies',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('domain', sa.VARCHAR(length=100), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), nullable=True),
    sa.Column('invite_code', sa.VARCHAR(length=20), nullable=False),
    sa.Column('creator_user_id', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['creator_user_id'], ['users.id'], name='fk_companies_creator_user_id'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('domain', name='uq_companies_domain'),
    sa.UniqueConstraint('invite_code', name='uq_companies_invite_code'),
    sa.UniqueConstraint('name', name='uq_companies_name')
    )
    with op.batch_alter_table('pr_metrics', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_pr_metrics_total_points'))
        batch_op.drop_index(batch_op.f('ix_pr_metrics_quality_score'))
        batch_op.drop_index(batch_op.f('ix_pr_metrics_quality_level'))
        batch_op.drop_index(batch_op.f('ix_pr_metrics_is_merged'))
        batch_op.drop_index(batch_op.f('ix_pr_metrics_current_status'))

    op.drop_table('pr_metrics')
    with op.batch_alter_table('pr_lifecycle_events', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_pr_lifecycle_events_pr_node_id'))
        batch_op.drop_index(batch_op.f('ix_pr_lifecycle_events_event_type'))
        batch_op.drop_index(batch_op.f('ix_pr_lifecycle_events_event_time'))

    op.drop_table('pr_lifecycle_events')
    with op.batch_alter_table('pr_metadata', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_pr_metadata_repository'))
        batch_op.drop_index(batch_op.f('ix_pr_metadata_pr_number'))
        batch_op.drop_index(batch_op.f('ix_pr_metadata_author_platform_username'))
        batch_op.drop_index(batch_op.f('ix_pr_metadata_author_identity_id'))

    op.drop_table('pr_metadata')
    with op.batch_alter_table('user_identities', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_identities_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_identities_status'))
        batch_op.drop_index(batch_op.f('ix_user_identities_platform_username'))
        batch_op.drop_index(batch_op.f('ix_user_identities_platform_email'))
        batch_op.drop_index(batch_op.f('ix_user_identities_platform'))
        batch_op.drop_index(batch_op.f('ix_user_identities_is_primary'))

    op.drop_table('user_identities')
    # ### end Alembic commands ###
